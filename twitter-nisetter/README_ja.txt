
# ========================================================================================
#                                                                                 Overview
#                                                                                 ========
SAFlute の Example プロジェクト「Twitter」のドメイン(WEBアプリ)パートです。

このExampleには以下の目的があります：
  o WEBアプリ(SAFlute)におけるDBFluteの利用イメージを掴んでもらう
  o ちょっとした検証などが可能な環境の提供
  o 実際にSAFluteを利用するときの環境構築の土台
   -> 詳しくは "Application Use" の欄をご覧下さい 

主な注意点としては、画面の作り込みはそんなに深くないということです。
「ロジックの再利用」や「排他制御」、「その他要件次第で変わる細かい動作・構成」など
Exampleならではの割り切りが存在していますので、実際のプロジェクトにおいては、
プロジェクトポリシーに合わせて実装して下さい。

最初から複数のドメイン(アプリ: 一般ユーザー向けとか管理向けとか)を想定した構成になっています。
ここでは架空のプロジェクト「Twitter」を想定し、
その中の一つのドメイン(アプリケーション)「Nisetter」を構成しています。

 Twitter (refers to SAFlute extends SAStruts)
  |
  |-Nisetter
  |-...
  |-...

 twitter-base     : ベースプロジェクト、parent の pom や、環境設定ファイルやERDなどのドキュメントなど
 twitter-common   : 共通プロジェクト、全てのドメインの共通ライブラリ、DBFluteの自動生成クラスもある
 twitter-nisetter : ドメインプロジェクト、実際のWEBアプリケーション、Actionクラスなど
 saflute          : SAFlute本体のプロジェクト、web.xmlやdiconやJavaクラスなどから参照されるクラスなど


# ========================================================================================
#                                                                              Environment
#                                                                              ===========
# ----------------------------------------------------------
#                                             Source Compile
#                                             --------------
Maven管理されていますので、動作させるためには M2E などを用意してください。

# ----------------------------------------------------------
#                                                   Database
#                                                   --------
データベースは、3306ポート (MySQLのデフォルト) で起動している MySQL を利用します。
ReplaceSchemaを叩くと、DBユーザーとスキーマ、テーブルが作成され、テストデータも登録されます。
(Windows なら ctrl + shift + R で replace-schema.bat)

# ----------------------------------------------------------
#                                                   Web Boot
#                                                   --------
Run Jetty Run プグラインを利用します。(Eclipse Marketplace からインストール可能)
Eclipseプロジェクトを選択して右クリックして "Run as" - "Run Jetty" を選択、
すると、コンソールに以下のような起動ログが出力されます。

 - _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
 -  the system has been initialized:
 - 
 -   -> Nisetter (Local Development)
 - _/_/_/_/_/_/_/_/_/_/

これで、以下のURLでアクセスすると画面を動かすことができます。

 http://localhost:8080/nisetter/

以降は、ツールバーの Launch ボタン (緑丸に右">"マーク) を押すだけで再起動します。
細かい起動設定は、Run as Configurations... から調整できます。

※jetty-web.xml の設定で、コンテキスト名が nisetter となる

ちなみに...このアプリケーションは、
会員がログインをして会員自身を検索して編集したり追加したりできるという、
なかなか世にも珍しい会員サイトになっています。


# ========================================================================================
#                                                                          Application Use
#                                                                          ===============
アプリケーションの環境構築の土台として利用するやり方の手順です。
この Twitter プロジェクトをそのまま修正して「自分のプロジェクト用」にしていきます。

# ----------------------------------------------------------
#                                                Basic Setup
#                                                -----------
twitter-base, twitter-common, twitter-nisetter, saflute の四つのプロジェクトをチェックアウトし、
saflute 以外は GIT から切断を切る。(GITのメタデータも削除してOK)

そして、twitterなどの名前をひたすら名前を変更していきます。

  o twitter -> 自分のプロジェクト名
  o nisetter -> 自分のドメイン名 (WEBアプリ名)

ctrl + H の File Search (ファイルの中身の検索) を利用すると良いでしょう。
(Customizeボタンから、他の Java Search などのあまり利用しないタブを消せます)

Replace ボタンから一括置換もすることができますが(注意しながらやること)、
例えばクラス名は Twitter と先頭大文字になるので大文字小文字は区別しましょう。
また、TwitterFwAssistantDirectorに、そのまま置換ではダメな値があります(見ればわかります)。
AssistantDirectorの中身に関しては、注意深く修正する方が良いでしょう。

パッケージ名やクラス名は、alt + shift + R (Mac だと alt + command + R) を使って、
リファクタリング機能で変更する方が良いでしょう。(Rename subpackages にチェックを入れましょう)
そのとき、パッケージ名は jp.bizreach.twitter 部分をまるごとプロジェクト用に修正します。
同時に、convention.diconのルートパッケージを「プロジェクトパッケージ.app」に、
basicInfoMap.dfprop の packageBase を「プロジェクトパッケージ.dbflute」に修正します。

FreeGenで自動生成されるクラスも、この時点ではリファクタリングで修正していきます。
(DBを構築してからでないとFreeGenが叩けないため)

とにかく、twitter や nisetter という文字が検索でHITしなくなるまで修正し続けます。
(あと、@author jflute や by jflute のコメントも削除したほうが...)

# ----------------------------------------------------------
#                                                  Genba Fit
#                                                  ---------
そして、後は現場フィットです。

  o テーブルは仮のものでもよいので、ReplaceSchemaでDBの環境を構築 (真っ先にこれ)
  o DBFluteの設定をもろもろいい感じにプロジェクトにフィットするように修正
  o message や config などの .properties の内容を自分のプロジェクト用に修正 (FreeGenも叩く)
  o AssistantDirector を自分のプロジェクト用に修正 (FreeGenも叩く)

  ※FreeGenは、ctrl + shift + R して manage.bat(sh) の 12 番

既存のアクションクラスなどは、似た画面を作るのであればそのまま修正して土台とする良いでしょう。
例えば、ログイン画面は、そのまま自分のプロジェクトに合った感じに修正して流用すると良いでしょう。
また、今後のためにもひとつだけシンプルな作りのプロトタイプ実装があると他の人が参考にできるので、
Member系の一覧検索画面と編集画面は、TIPSコメントをそのまま残した上で流用しておくと良いでしょう。

さて、あとは臨機に修正していってください。全ての情報がここにあるわけではありません。
迷う場合や悩むことがあれば、DBFluteユーザの集いなどのMLで質問(フィードバック)すると良いでしょう。

http://dbflute.seasar.org/ja/manual/topic/office/feedback.html

# ----------------------------------------------------------
#                                                      Omake
#                                                      -----
workspace の設定 (メニューの "Window - Preferences") の、
"Java - Editor - Templates" の設定をすると良いでしょう。
"Import..."を押して、twitter-base の
environment/eclipse/java-editor-templates.xml
を import してみましょう。

ソースコード上で、_ta と押して補完 (ctrl + space) すると、
タグコメントが補完できます。クラス内のインスタンス変数やメソッドなどを、
カテゴリごとに区分けしてパッと見でクラスの全体像がわかるようにすると良いでしょう。
(必須ではありませんがお奨めです)

また、この設定をすると、JUnitのテストメソッドの補完で、
## Arrange ##, ## Act ##, ## Assert ## が付与されるようになります。

